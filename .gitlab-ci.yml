stages:
  #  - sonar-check
  - build
  - test
  - rebuilding

#sonarqube-check:
#  stage: sonar-check
#  variables:
#    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
#    SONAR_TOKEN: "ba00cdec2010b5084058842e1595cdb104055c9b"
#    SONAR_HOST_URL: "http://sonarqube:9000/"
#    SONAR_PROJECT_KEY: "pet_clinic"
#  script:
#    - mvn compile -P testprod sonar:sonar -e -Dsonar.projectKey=$SONAR_PROJECT_KEY -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN
#  tags:
#    - clinic_docker_runner
#  allow_failure: false
#  rules:
#    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

building:
  stage: build
  before_script:
    - docker-compose down
    - docker image prune -a -f
    - docker-compose build PROD_SERVICES
  script:
    - docker-compose up -d
  after_script:
    - docker image prune -f
  tags:
    - clinic_shell
  rules:
    - if: $CI_COMMIT_BRANCH == 'master'

test_maven:

  stage: test
  variables:
#    DOCKER_HOST: tcp://127.0.0.0:53
    DOCKER_TLS_CERTDIR: ""

  # Official docker compose image.
  image:
    name: docker/compose:latest
  services:
    - docker:dind
  before_script:
    - docker-compose up -d
    - docker-compose start test_db
    - docker-compose start test_petclinic
  script:
    - mvn clean test -P testprod
  after_script:
    - docker-compose down
    - docker-compose rm -f
    - docker-compose stop test_petclinic
    - docker-compose stop test_db
    - docker-compose rm -f test_petclinic
    - docker-compose rm -f test_db
#    - docker stop test_pets_db
#    - docker stop test_petclinic_run
#    - docker rm test_pets_db
#    - docker rm test_petclinic_run
  tags:
    - clinic_docker_runner
  artifacts:
    reports:
      junit:
        - web/target/surefire-reports/TEST-*.xml
        - web/target/failsafe-reports/TEST-*.xml
  rules:
    - if: $CI_MERGE_REQUEST_IID